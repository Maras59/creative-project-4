[{"/usr/share/caddy/creative-4/front-end/src/index.js":"1","/usr/share/caddy/creative-4/front-end/src/reportWebVitals.js":"2","/usr/share/caddy/creative-4/front-end/src/App.js":"3"},{"size":535,"mtime":1669781961856,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1669781961856,"results":"6","hashOfConfig":"5"},{"size":7425,"mtime":1669857516792,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3mwm4a",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"/usr/share/caddy/creative-4/front-end/src/index.js",[],[],"/usr/share/caddy/creative-4/front-end/src/reportWebVitals.js",[],[],"/usr/share/caddy/creative-4/front-end/src/App.js",["18","19","20","21"],[],"import { useState, useEffect } from 'react';\nimport {BrowserRouter as Router, Link} from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\n\n\nfunction App() {\n  \n  const [isVarChanged, setChanged] = useState(false);\n  \n  const [books, setBooks] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [bookmarks, setBookmarks] = useState([]);\n  \n  const [error, setError] = useState(\"\");\n  \n  const [count, setCount] = useState(\"\")\n  const [name, setName] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [newReview, setReview] = useState(\"\")\n  \n  \n  const fetchBooks = async() => {\n    try {      \n      const response = await axios.get(\"/api/books\");\n      setBooks(response.data.books);\n    } catch(error) {\n      setError(\"error retrieving books: \" + error);\n    }\n  }\n  const createBook = async() => {\n    try {\n      await axios.post(\"/api/books\", {name: name, author: author, tmp: \"\"});\n    } catch(error) {\n      setError(\"error adding a book: \" + error);\n    }\n  }\n  const deleteOneBook = async(book) => {\n    try {\n      await axios.delete(\"/api/books/\" + book.id);\n    } catch(error) {\n      setError(\"error deleting a book\" + error);\n    }\n  }\n  \n  useEffect(() => {\n    fetchBooks();\n  },[]);\n\n  const addBook = async(e) => {\n    e.preventDefault();\n    await createBook();\n    fetchBooks();\n    setName(\"\");\n    setAuthor(\"\");\n    setReview(\"\");\n    setCount(\"\");\n  }\n\n  const deleteBook = async(book) => {\n    await deleteOneBook(book);\n    fetchBooks();\n  }\n  \n  const fetchFavorites = async() => {\n    try {      \n      console.log(\"Calling Fetch Favorites\");\n      const response = await axios.get(\"/api/favorites\");\n      setFavorites(response.data.favorites);\n    } catch(error) {\n      setError(\"error retrieving favorites: \" + error);\n    }\n  }\n  const createFavorite = async(book) => {\n    try {\n      console.log(book);\n      await axios.post(\"/api/favorites\", {name: book.name, author: book.author, review: book.tmp});\n    } catch(error) {\n      setError(\"error adding a favorite: \" + error);\n    }\n  }\n  \n  const updateReview = async(book) => {\n    try {\n      await axios.put(\"/api/favorites\", {id: book.id, name: book.name, author: book.author, review: book.review});\n      console.log(\"calling update Rev\");\n    } catch(error) {\n      setError(\"error adding a favorite: \" + error);\n    }\n  }\n  \n  const deleteOneFavorite = async(fave) => {\n    try {\n      await axios.delete(\"/api/favorites/\" + fave.id);\n    } catch(error) {\n      setError(\"error deleting a favorite\" + error);\n    }\n  }\n  \n  useEffect(() => {\n    fetchFavorites();\n    setChanged(false);\n  },[isVarChanged]);\n\n  const newRev = async(fave) => {\n    await updateReview(fave.data);\n    setChanged(true);\n    fetchFavorites();\n  }\n\n  const addFave = async(e) => {\n    await createFavorite(e);\n    fetchFavorites();\n    setName(\"\");\n    setAuthor(\"\");\n    setReview(\"\");\n    setCount(\"\");\n  }\n\n  const deleteFave = async(fave) => {\n    await deleteOneFavorite(fave);\n    fetchFavorites();\n  }\n  \n  const fetchBookmarks = async() => {\n    try {      \n      const response = await axios.get(\"/api/bookmarks\");\n      setBookmarks(response.data.bookmarks);\n    } catch(error) {\n      setError(\"error retrieving bookmarks: \" + error);\n    }\n  }\n  const createBookmark = async(book) => {\n    try {\n      let num = '0';\n      if (book.pagenumber){\n        num = book.pagenumber;\n      }\n      await axios.post(\"/api/bookmarks\", {name: book.name, author: book.author, pagenumber: num, tmp: \"\"});\n    } catch(error) {\n      setError(\"error adding a bookmark: \" + error);\n    }\n  }\n  const deleteOneBookmark = async(bm) => {\n    try {\n      await axios.delete(\"/api/bookmarks/\" + bm.id);\n    } catch(error) {\n      setError(\"error deleting a bookmark\" + error);\n    }\n  }\n  \n  const updateBookPage = async(bm) => {\n    try {\n      \n      await axios.put(\"/api/bookmarks\", {id: bm.id, pagenum:bm.pagenumber});\n    } catch(error) {\n      setError(\"error deleting a bookmark\" + error);\n    }\n  }\n  \n  useEffect(() => {\n    fetchBookmarks();\n  },[]);\n\n  const addBm = async(e) => {\n    await createBookmark(e);\n    fetchBookmarks();\n    setName(\"\");\n    setAuthor(\"\");\n    setReview(\"\");\n    setCount(\"\");\n  }\n\n  const deleteBm = async(bm) => {\n    await deleteOneBookmark(bm);\n    fetchBookmarks();\n  }\n  \n  const updatePageNum = async(bm) => {\n    console.log(bm);\n    await deleteOneBookmark(bm);\n    await createBookmark({name: bm.name, author: bm.author, pagenumber: count});\n    fetchBookmarks();\n    setName(\"\");\n    setAuthor(\"\");\n    setReview(\"\");\n    setCount(\"\");\n  }\n  \n  \n  return (\n    <div className=\"App\">\n    \n      <h1 id=\"PageTitle\">My Book List</h1>\n      \n      <div className=\"colWrap\">\n      <div className=\"columnn\">\n      <h1>All Books</h1>\n      <form onSubmit={addBook} className=\"form\">\n      <h2>Create a Book</h2>\n        <div>\n            <input placeholder=\"Title\" type=\"text\" value={name} onChange={e => setName(e.target.value)} />\n        </div>\n        <div>\n            <input placeholder=\"Author\" type=\"text\" value={author} onChange={e=>setAuthor(e.target.value)} />\n        </div>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      {books?.map( book => (\n        <div key={book.id} className=\"book\">\n          <div className=\"bookDescription\">\n            <p><strong>{book.name}</strong></p>\n            <p><i>By: {book.author}</i></p>\n          </div>\n            <button onClick={e => addFave(book)}>Add To Favorites</button><p></p>\n          <button onClick={e => deleteBook(book)}>Delete</button>\n          <button onClick={e => addBm(book)}>Start Reading</button>\n        </div>\n      ))}\n      </div>\n      \n      <div className=\"columnn\">\n      <h1>Favorite Books</h1>\n      {favorites?.map( fave => (\n        <div key={fave.id} className=\"book\">\n          <div className=\"bookDescription\">\n            <p><strong>{fave.name}</strong></p>\n            <p><i>By: {fave.author}</i></p>\n            <p>My Rating: {fave.review}</p>\n            Rate:\n            <button onClick={e => newRev({data: {id: fave.id, name: fave.name, author: fave.author, review: \"Bad\"}, obj:fave})}>Bad</button>\n            <button onClick={e => newRev({data: {id: fave.id, name: fave.name, author: fave.author, review: \"Ok\"}, obj:fave})}>Ok</button>\n            <button onClick={e => newRev({data: {id: fave.id, name: fave.name, author: fave.author, review: \"Good\"}, obj:fave})}>Good</button>\n            \n          </div>\n          <button onClick={e => deleteFave(fave)}>Remove From Favorites</button>\n        </div>\n      ))}\n      </div>\n      \n      \n      <div className=\"columnn\">\n      <h1>Currently Reading</h1>\n      {bookmarks?.map( bm => (\n        <div key={bm.id} className=\"book\">\n          <div className=\"bookDescription\">\n            <p><strong>{bm.name}</strong></p>\n            <p><i>By: {bm.author}</i></p>\n          </div>\n          <button onClick={e => deleteBm(bm)}>Done Reading</button><p></p>\n          <button onClick={e => addFave({name: bm.name, author: bm.author, review: \"\"})}>Add to Favorites</button>\n        </div>\n      ))}\n      </div>\n      </div>\n      {error}\n      <Router>\n      <div>\n        {/* üëáÔ∏è Anchor link */}\n        <a href=\"https://google.com\" target=\"_blank\" rel=\"noreferrer\">\n          <button>GitHub Repo</button>\n        </a>\n      </div>\n    </Router>\n    </div>\n    \n  );\n}\n\nexport default App;\n",{"ruleId":"22","severity":1,"message":"23","line":2,"column":34,"nodeType":"24","messageId":"25","endLine":2,"endColumn":38},{"ruleId":"22","severity":1,"message":"26","line":20,"column":10,"nodeType":"24","messageId":"25","endLine":20,"endColumn":19},{"ruleId":"22","severity":1,"message":"27","line":152,"column":9,"nodeType":"24","messageId":"25","endLine":152,"endColumn":23},{"ruleId":"22","severity":1,"message":"28","line":179,"column":9,"nodeType":"24","messageId":"25","endLine":179,"endColumn":22},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'newReview' is assigned a value but never used.","'updateBookPage' is assigned a value but never used.","'updatePageNum' is assigned a value but never used."]